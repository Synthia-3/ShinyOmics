Enorm_filled <- Enorm_filled %>%
dplyr::group_by(Locustag) %>%
dplyr::summarise_all(funs(na.omit(.)[1]))
Enorm_filled <- Enorm[!is.na(row.names(Enorm)),]
Enorm_filled$Locustag <- row.names(Enorm_filled)
Enorm_filled$Locustag
Locustag
Enorm_filled <- Enorm[!is.na(row.names(Enorm)),]
Enorm_filled <- as.data.frame(Enorm[!is.na(row.names(Enorm)),])
Enorm_filled$Locustag <- row.names(Enorm_filled)
Enorm_filled <- Enorm_filled %>%
dplyr::group_by(Locustag) %>%
dplyr::summarise_all(funs(na.omit(.)[1]))
summarise_all()
Enorm_filled <- Enorm_filled %>%
dplyr::group_by(Locustag) %>%
dplyr::summarise_all()
Enorm_filled <- Enorm_filled %>%
dplyr::group_by(Locustag) %>%
dplyr::summarise_all(.funs = na.omit)
Enorm_filled <- Enorm_filled %>%
dplyr::group_by(Locustag) %>%
dplyr::summarise_all(funs(na.omit))
Enorm_filled <- Enorm_filled %>%
dplyr::group_by(Locustag) %>%
dplyr::summarise_all(.funs=sort)
library("dplyr")
Enorm_filled <- Enorm_filled %>%
group_by(Locustag) %>%
summarise_all(.funs=sort)
Enorm_filled <- Enorm_filled %>%
group_by(Locustag) %>%
summarise_all(.funs=sort(.)[1])
Enorm_filled <- Enorm_filled %>%
group_by(Locustag) %>%
summarise_all(funs(sort(.)[1]))
save.image("D:/defne/Documents/BC/TVO/TnSeq_RNASeq_Evo/R scripts and nbs/GEOexpressionData.RData")
write.csv(Enorm_filled, 'D:/defne/Documents/BC/TVO/TnSeq_RNASeq_Evo/GEOexpr_norm_clean.csv')
Evars_clean <- apply(Enorm_filled, 1, var, na.rm=T)
head(Evars_clean)
hist(Enorm_filled$GSM1017568)
hist(Enorm_filled$GSM1121613)
apply(Enorm_filled,2,mean)
apply(Enorm_filled,2,function(x) mean(x,na.rm=T))
apply(Enorm_filled,2,function(x) mean(as.numeric(x),na.rm=T))
for (i in 2:dim(Enorm_filled)[2]) {
thiscol <-as.numeric(Enorm_filled[,i])
Enorm_filled[ ,i] <- (thiscol - mean(thiscol, na.rm=TRUE)) / sd(thiscol, na.rm=TRUE)
}
Enorm_filled[1:5, 1:5]
for (i in 2:dim(Enorm_filled)[2]) {
thiscol <-Enorm_filled[,i]
Enorm_filled[ ,i] <- (thiscol - mean(thiscol, na.rm=TRUE)) / sd(thiscol, na.rm=TRUE)
}
head(as.numeric(Enorm_filled[,3]))
head(Enorm_filled[,3])
mean(Enorm_filled[,3], na.rm=T)
mean(Enorm_filled[[,3]], na.rm=T)
mean(Enorm_filled[[3]], na.rm=T)
for (i in 2:dim(Enorm_filled)[2]) {
thiscol <-Enorm_filled[[i]]
Enorm_filled[[i]] <- (thiscol - mean(thiscol, na.rm=TRUE)) / sd(thiscol, na.rm=TRUE)
}
Enorm_filled[1:5,1:5]
write.csv(Enorm_filled, 'D:/defne/Documents/BC/TVO/TnSeq_RNASeq_Evo/GEOexpr_norm_clean.csv')
Evars_df <- data.frame('Gene'=row.names(Enorm_filled),
'Var'=Evars_clean)
write.csv(Evars_df, 'D:/defne/Documents/BC/TVO/TnSeq_RNASeq_Evo/GEOexpr_norm_clean_VARS.csv')
s<-var(Enorm_filled[[2:246]])
s<-var(Enorm_filled[,2:246])
s<-var(t(Enorm_filled[,2:246]), na.rm=T)
s[1:10,1:10]
#fill na with 0 (mean expression change)
Enorm_mat <- as.matrix(Enorm_filled[,2:246])
Enorm_mat[is.na(Enorm_mat)]<-0
s<-var(t(Enorm_mat))
s[1:10,1:10]
a.05<-glasso(s, rho=.05)
library('glasso')
a.05<-glasso(s, rho=.05)
expression_Adj <- a.05$wi
mean(expression_Adj==0)
library(igraph)
CoExpNet <- graph_from_adjacency_matrix(expression_Adj, mode="undirected", diag=F)
length(V(CoExpNet))
length(E(CoExpNet))
E(CoExpNet)
expression_Adj[1:10,1:10]
CoExpNet <- graph_from_adjacency_matrix(expression_Adj, mode="undirected", weighted = T, diag=F)
length(E(CoExpNet))
2032*2032
names(V(CoExpNet))
row.names(Enorm_mat)[1:10]
row.names(Enorm_filled)[1:10]
Enorm_filled$Locustag[1:10]
len(Enorm_filled$Locustag)
length(Enorm_filled$Locustag)
names(V(CoExpNet))<-Enorm_filled$Locustag
CoExpNet<- set_vertex_attr(CoExpNet, name="Name", index = V(CoExpNet), value=Enorm_filled$Locustag)
E(CoExpNet)[1:5]
V(CoExpNet)[1:10]
V(CoExpNet)[1:10]$Name
V(CoExpNet)[1:10]$name
CoExpNet<- set_vertex_attr(CoExpNet, name="name", index = V(CoExpNet), value=Enorm_filled$Locustag)
E(CoExpNet)[1:5]
write_graph(CoExpNet, 'D:/defne/Documents/BC/TVO/NetworkBuilding/usable networks/GEO_coexpression.csv',
format = 'edgelist')
range(1:5)-1
range(1,5)-1
c(1:5)-1
node_df <- data.frame("ID"=c(1:2032)-1,
"Gene" = Enorm_filled$Locustag)
write.csv(node_df, 'D:/defne/Documents/BC/TVO/NetworkBuilding/usable networks/GEO_coexpression_nodes.csv', row.names = F )
write_graph(CoExpNet, 'D:/defne/Documents/BC/TVO/NetworkBuilding/usable networks/GEO_coexpression.gml',
format = 'gml')
a.1<-glasso(s, rho=.1)
expression_Adj.1 <- a.1$wi
mean(expression_Adj.1==0)
CoExpNet.1 <- graph_from_adjacency_matrix(expression_Adj.1, mode="undirected", weighted = T, diag=F)
CoExpNet.1<- set_vertex_attr(CoExpNet.1, name="name", index = V(CoExpNet.1), value=Enorm_filled$Locustag)
write_graph(CoExpNet.1, 'D:/defne/Documents/BC/TVO/NetworkBuilding/usable networks/GEO_coexpression_rho.1_edges.csv',
format = 'edgelist')
write_graph(CoExpNet, 'D:/defne/Documents/BC/TVO/NetworkBuilding/usable networks/GEO_coexpression_rho.1.gml',
format = 'gml')
cc <- components(CoExpNet.1)
length(cc$csize)
cc$csize
write_graph(CoExpNet.1, 'D:/defne/Documents/BC/TVO/NetworkBuilding/usable networks/GEO_coexpression_rho.1.gml',
format = 'gml')
length(E(CoExpNet.1))
a.2<-glasso(s, rho=.2)
expression_Adj.2 <- a.2$wi
mean(expression_Adj.2==0)
CoExpNet.2 <- graph_from_adjacency_matrix(expression_Adj.2, mode="undirected", weighted = T, diag=F)
CoExpNet.2<- set_vertex_attr(CoExpNet.2, name="name", index = V(CoExpNet.2), value=Enorm_filled$Locustag)
write_graph(CoExpNet.2, 'D:/defne/Documents/BC/TVO/NetworkBuilding/usable networks/GEO_coexpression_rho.2_edges.csv',
format = 'edgelist')
write_graph(CoExpNet.2, 'D:/defne/Documents/BC/TVO/NetworkBuilding/usable networks/GEO_coexpression_rho.2.gml',
format = 'gml')
cc <- components(CoExpNet.2)
length(cc$csize)
cc$csize
length(E(CoExpNet.2))
degree.distribution(CoExpNet.2)
plot(degree.distribution(CoExpNet.2))
plot(degree.distribution(CoExpNet.1))
plot(degree.distribution(CoExpNet))
plot(degree.distribution(CoExpNet.2),log = "xy")
plot(degree.distribution(CoExpNet.1),log = "xy")
plot(degree.distribution(CoExpNet),log = "xy")
a.3<-glasso(s, rho=.3)
expression_Adj.3 <- a.3$wi
mean(expression_Adj.3==0)
CoExpNet.3 <- graph_from_adjacency_matrix(expression_Adj.3, mode="undirected", weighted = T, diag=F)
CoExpNet.3<- set_vertex_attr(CoExpNet.3, name="name", index = V(CoExpNet.3), value=Enorm_filled$Locustag)
write_graph(CoExpNet.3, 'D:/defne/Documents/BC/TVO/NetworkBuilding/usable networks/GEO_coexpression_rho.3_edges.csv',
format = 'edgelist')
write_graph(CoExpNet.3, 'D:/defne/Documents/BC/TVO/NetworkBuilding/usable networks/GEO_coexpression_rho.3.gml',
format = 'gml')
cc <- components(CoExpNet.3)
length(cc$csize)
sum(cc$csize==1)
max(cc$csize)
length(E(CoExpNet.3))
plot(degree.distribution(CoExpNet.3),log = "xy")
plot(CoExpNet.3, vertex.size=1, vertex.label=NA)
save.image("D:/defne/Documents/BC/TVO/TnSeq_RNASeq_Evo/R scripts and nbs/GEOexpressionData_110518.RData")
library('glasso')
gene_pa <- read.csv('D:/defne/Documents/BC/TVO/pangenome/Pangenome and Clustering/SpectralSM4300_ANNOTATION_ALL_clean040218.csv', header=T, stringsAsFactors = F)
gene_pa <- gene_pa[,1:373]
gene_pa$Product <- NULL
#turn to bool
gene_pa_bool <- sapply(gene_pa[,2:372], function(x){x==" "})
gene_pa_bool <- as.data.frame(gene_pa_bool)
#gene_pa_bool$Cluster <- gene_pa$Cluster
s <- var(t(gene_pa_bool))
a.1 <- glasso(s, rho=0.1)
pa_graph <- graph_from_adjacency_matrix(a.1$iw, mode="undirected", weighted=T)
a.1$wi[1:10,1:10]
pa_graph <- graph_from_adjacency_matrix(a.1$wi, mode="undirected", weighted=T)
set_vertex_attr(pa_graph, 'Cluster', index = V(pa_graph), value=gene_pa$Cluster)
cc <- components(pa_graph)
max(cc$csize)
pa_graph <- graph_from_adjacency_matrix(a.1$wi, mode="undirected", weighted=T, diag = F)
set_vertex_attr(pa_graph, 'Cluster', index = V(pa_graph), value=gene_pa$Cluster)
plot(degree_distribution(pa_graph), log="xy")
length(E(pa_graph))
write_graph(pa_graph, 'D:/defne/Documents/BC/TVO/NetworkBuilding/usable networks/PresenceAbsence_rho0.1.gml',
format = 'gml')
a.05 <- glasso(s, rho=0.05)
pa_graph.05 <- graph_from_adjacency_matrix(a.05$wi, mode="undirected", weighted=T, diag = F)
set_vertex_attr(pa_graph.05, 'Cluster', index = V(pa_graph), value=gene_pa$Cluster)
set_vertex_attr(pa_graph.05, 'Cluster', index = V(pa_graph.05), value=gene_pa$Cluster)
write_graph(pa_graph.05, 'D:/defne/Documents/BC/TVO/NetworkBuilding/usable networks/PresenceAbsence_rho0.05.gml',
format = 'gml')
plot(degree_distribution(pa_graph.05), log="xy")
length(E(pa_graph.05))
plot(component_distribution(pa_graph.05))
max(component_distribution(pa_graph.05))
max(components(pa_graph.05)$csize)
c <- components(pa_graph.05)
c$membership[1:01]
c$membership[1:10]
c$no
c$csize[1:10]
GCC <- c$membership==3
pa_subgraph.05 <- subgraph(pa_graph.05, V(pa_graph.05)[GCC])
len(V(pa_subgraph.05))
length(V(pa_subgraph.05))
plot(pa_subgraph.05, vertex.size=1, vertex.label=NA)
write_graph(pa_subgraph.05, 'D:/defne/Documents/BC/TVO/NetworkBuilding/usable networks/PresenceAbsence_GCC_rho0.05.gml',
format = 'gml')
V(pa_graph.05)[1:10]$Cluster
get.vertex.attribute(pa_graph.05, 'Cluster', V(pa_graph.05)[1:5])
set_vertex_attr(pa_graph.05, 'Cluster', index = V(pa_graph.05), value=gene_pa$Cluster)
get.vertex.attribute(pa_graph.05, 'Cluster', V(pa_graph.05)[1:5])
pa_graph.05<-set_vertex_attr(pa_graph.05, 'Cluster', index = V(pa_graph.05), value=gene_pa$Cluster)
write_graph(pa_graph.05, 'D:/defne/Documents/BC/TVO/NetworkBuilding/usable networks/PresenceAbsence_rho0.05.gml',
format = 'gml')
GCC <- c$membership==3
pa_subgraph.05 <- subgraph(pa_graph.05, V(pa_graph.05)[GCC])
write_graph(pa_subgraph.05, 'D:/defne/Documents/BC/TVO/NetworkBuilding/usable networks/PresenceAbsence_GCC_rho0.05.gml',
format = 'gml')
library(igraph)
library(visNetwork)
annot <- read.csv('D:/defne/Documents/BC/TVO/TnSeq_RNASeq_Evo/New Experiments/Annotation_3Strains_Cleaned.csv', header = T, stringsAsFactors = F)
nets <- readRDS('D:/defne/Documents/BC/TVO/TnSeq_RNASeq_Evo/New Experiments/networks/Networks120118.RData')
metadata <- read.csv('D:/defne/Documents/BC/TVO/TnSeq_RNASeq_Evo/New Experiments/T4_metadata.csv', header = T, stringsAsFactors = F)
ppi <- nets$ppi_g
gclust <- components(ppi)
ppi_lcc = induced.subgraph(ppi, V(ppi)[which(gclust$membership ==which.max(gclust$csize))])
ppi_data <- data.frame(Gene = as.character(names(V(ppi_lcc))))
ppi_data <- merge(ppi_data, metadata, by.x='Gene', by.y = 'Gene', all.x=T, all.y=F, sort=F)
ppi_data <- merge(ppi_data, annot[,c(1,9:18)], by.x='Gene', by.y = 'TIGR4.old', all.x=T, all.y=F, sort=F)
ppi_tag_partition <- as.numeric(as.factor(ppi_data$Tag1))
ppi_cat_partition <- as.numeric(as.factor(ppi_data$Category1))
ppi_tag_partition[is.na(ppi_tag_partition)] <- max(ppi_tag_partition)+1
ppi_cat_partition[is.na(ppi_cat_partition)] <- max(ppi_cat_partition)+1
#modularity(ppi, ppi_tag_partition)
greedy_partition <- cluster_fast_greedy(ppi_lcc)
modularity(ppi_lcc, membership(greedy_partition))
#modularity(ppi_lcc, membership(greedy_partition))
ppi_tag_partition
ppi_tag_partition[is.na(ppi_tag_partition)] <- max(ppi_tag_partition)+1
ppi_tag_partition
is.na(ppi_tag_partition)
ppi_tag_partition[is.na(ppi_tag_partition)] <- max(ppi_tag_partition, na.rm=T)+1
ppi_cat_partition[is.na(ppi_cat_partition)] <- max(ppi_cat_partition, na.rm=T)+1
ppi_tag_partition
modularity(ppi, ppi_tag_partition)
modularity(ppi_lcc, ppi_tag_partition)
modularity(ppi_lcc, ppi_cat_partition)
modularity(ppi_lcc, membership(greedy_partition))
plot(greedy_partition, ppi_lcc, vertex.label=NA, vertex.size=2)
greedy_partition$merges
greedy_partition$membership
unique(greedy_partition$membership)
length(unique(greedy_partition$membership))
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(eval=FALSE)
#get metadata for the experiments
exptsheet <- read.csv('allfeatures.csv', header=T, stringsAsFactors = F)
setwd('D:/defne/Documents/BC/TVO/TnSeq_RNASeq_Evo/New Experiments/')
#get metadata for the experiments
exptsheet <- read.csv('allfeatures.csv', header=T, stringsAsFactors = F)
exptsheet <- exptsheet[,c('Experiment', 'Strain', 'AB','Concentration', 'Survive')]
exptsheet <- unique(exptsheet)
#get the entropy values
ent_4 <- read.csv('Entropy/entropy_4_121718.csv', header=T, stringsAsFactors = F)
lams <- seq(1,0.8,-0.02)
ent_4 <- ent_4[ent_4$Rho %in% lams,]
lams <- unique(ent_4$Rho)
# fix typo in "Experiment" column - V-T4_VNC34 should be V-T4_VNC36
ent_4$Experiment[ent_4$Experiment == "V-T4_VNC34"]<-"V-T4_VNC36"
#add in the metadata
ent_4 <- merge(ent_4, exptsheet, by = "Experiment", all.x=T, all.y=F, sort=F)
library(caret)
source('Entropy/threshold_classify.R')
ent_4$Prediction <- F
predictors <- data.frame('Rho' = lams,
'Threshold' = rep(0, length(lams)),
'Accuracy' = rep(0, length(lams)),
'AcuracyLower' = rep(0, length(lams)),
'AccuracyHigher' = rep(0, length(lams)))
for (i in c(1:length(lams))){
thislambda <- lams[i]
Hvals <- ent_4$H_pdON[ent_4$Rho==thislambda]
Svals <- as.logical(ent_4$Survive[ent_4$Rho==thislambda])
thispredict <- threshold_classify(Hvals,Svals)
ent_4$Prediction[ent_4$Rho==thislambda] <- thispredict$prediction
predictors$Threshold[i] <- thispredict$threshold
predictors$Accuracy[i] <- thispredict$cm$overall['Accuracy']
predictors$AccuracyLower[i] <- thispredict$cm$overall['AccuracyLower']
predictors$AccuracyHigher[i] <- thispredict$cm$overall['AccuracyUpper']
}
View(predictors)
thispredict$cm$overall
thispredict$cm$table
names(ent_4)
ggplot(ent_4, aes(x=H_pdON, fill=Survive))+geom_histogram(bins=10)+facet_wrap(Experiment,ncol = 5)+theme_classic()
ggplot(ent_4, aes(x=H_pdON, fill=Survive))+geom_histogram(bins=10)+facet_wrap(ent_4$Experiment,ncol = 5)+theme_classic()
head(ent_4)
ggplot(ent_4, aes(x=H_pdON, fill=Survive))+geom_histogram(bins=10)+facet_wrap(Rho,ncol = 5)+theme_classic()
ggplot(ent_4, aes(x=H_pdON, fill=Survive))+geom_histogram(bins=10)+facet_wrap(ent_4Rho,ncol = 5)+theme_classic()
ggplot(ent_4, aes(x=H_pdON, fill=Survive))+geom_histogram(bins=10)+facet_wrap(ent_4$Rho,ncol = 5)+theme_classic()
ggplot(ent_4, aes(x=H_pdON, fill=Survive))+geom_histogram(bins=10, aes(fil=Survive))+facet_wrap(ent_4$Rho,ncol = 5)+theme_classic()
ggplot(ent_4, aes(x=H_pdON, fill=Survive))+geom_histogram(bins=10, aes(fill=Survive))+facet_wrap(ent_4$Rho,ncol = 5)+theme_classic()
ggplot(ent_4, aes(x=H_pdON, fill=Survive))+geom_histogram(bins=10, aes(fill=as.factor(Survive)))+facet_wrap(ent_4$Rho,ncol = 5)+theme_classic()
ggplot(ent_4, aes(x=H_pdON, fill=Survive))+geom_histogram(bins=10, aes(fill=as.factor(Survive)), position="dodge")+facet_wrap(ent_4$Rho,ncol = 5)+theme_classic()
ggplot(ent_4, aes(x=Survive, y=H_pdON, fill=Survive))+geom_boxplot(), position="dodge")+facet_wrap(ent_4$Rho,ncol = 5)+theme_classic()
ggplot(ent_4, aes(x=Survive, y=H_pdON, fill=Survive))+geom_boxplot()+facet_wrap(ent_4$Rho,ncol = 5)+theme_classic()
ggplot(ent_4, aes(x=Survive, y=H_pdON, fill=Survive, group=Survive))+geom_boxplot()+facet_wrap(ent_4$Rho,ncol = 5)+theme_classic()
setwd('D:/defne/Documents/BC/TVO/TnSeq_RNASeq_Evo/New Experiments/')
#get metadata for the experiments
exptsheet <- read.csv('allfeatures.csv', header=T, stringsAsFactors = F)
exptsheet <- exptsheet[,c('Experiment', 'Strain', 'AB','Concentration', 'Survive')]
exptsheet <- unique(exptsheet)
#get the entropy values
ent_4 <- read.csv('Entropy/entropy_4_121818.csv', header=T, stringsAsFactors = F)
lams <- seq(1,0.8,-0.02)
ent_4 <- ent_4[ent_4$Rho %in% lams,]
lams <- unique(ent_4$Rho)
# fix typo in "Experiment" column - V-T4_VNC34 should be V-T4_VNC36
ent_4$Experiment[ent_4$Experiment == "V-T4_VNC34"]<-"V-T4_VNC36"
#add in the metadata
ent_4 <- merge(ent_4, exptsheet, by = "Experiment", all.x=T, all.y=F, sort=F)
library(caret)
source('Entropy/threshold_classify.R')
ent_4$Prediction <- F
setwd('D:/defne/Documents/BC/TVO/TnSeq_RNASeq_Evo/New Experiments/')
#get metadata for the experiments
exptsheet <- read.csv('allfeatures.csv', header=T, stringsAsFactors = F)
exptsheet <- exptsheet[,c('Experiment', 'Strain', 'AB','Concentration', 'Survive')]
exptsheet <- unique(exptsheet)
#get the entropy values
ent_4 <- read.csv('Entropy/entropy_4_121818_all.csv', header=T, stringsAsFactors = F)
lams <- seq(1,0.1,-0.02)
ent_4 <- ent_4[ent_4$Rho %in% lams,]
lams <- unique(ent_4$Rho)
# fix typo in "Experiment" column - V-T4_VNC34 should be V-T4_VNC36
ent_4$Experiment[ent_4$Experiment == "V-T4_VNC34"]<-"V-T4_VNC36"
#add in the metadata
ent_4 <- merge(ent_4, exptsheet, by = "Experiment", all.x=T, all.y=F, sort=F)
library(caret)
source('Entropy/threshold_classify.R')
ent_4$Prediction <- F
ggplot(ent_4, aes(x=Survive, y=H_pdON, fill=Survive, group=Survive))+geom_boxplot()+facet_wrap(ent_4$Rho,ncol = 5)+theme_classic()
ggsave('Entropy/Entropy_4_scan_rho_boxplot.pdf', width=15, height=25)
ggplot(ent_4, aes(x=Survive, y=H_pdON, fill=Survive, group=Survive))+geom_boxplot()+facet_wrap(ent_4$Rho,ncol = 5)+theme_classic()
ggsave('Entropy/Entropy_4_scan_rho_boxplot.pdf', width=15, height=25)
getwd()
ggplot(ent_4, aes(x=Survive, y=H_pdON, fill=Survive, group=Survive))+geom_boxplot()+facet_wrap(ent_4$Rho,ncol = 5)+theme_classic()
ggsave('../Entropy/Entropy_4_scan_rho_boxplot.pdf', width=15, height=25)
ent_4$Prediction <- F
predictors <- data.frame('Rho' = lams,
'Threshold' = rep(0, length(lams)),
'Accuracy' = rep(0, length(lams)),
'AcuracyLower' = rep(0, length(lams)),
'AccuracyHigher' = rep(0, length(lams)))
for (i in c(1:length(lams))){
thislambda <- lams[i]
Hvals <- ent_4$H_pdON[ent_4$Rho==thislambda]
Svals <- as.logical(ent_4$Survive[ent_4$Rho==thislambda])
thispredict <- threshold_classify(Hvals,Svals)
ent_4$Prediction[ent_4$Rho==thislambda] <- thispredict$prediction
predictors$Threshold[i] <- thispredict$threshold
predictors$Accuracy[i] <- thispredict$cm$overall['Accuracy']
predictors$AccuracyLower[i] <- thispredict$cm$overall['AccuracyLower']
predictors$AccuracyHigher[i] <- thispredict$cm$overall['AccuracyUpper']
}
sum(is.infinite(ent_4$H_pdON))
Hvals
ent_4_clean <- ent_4[!is.na(ent_4$H_pdON),]
predictors <- data.frame('Rho' = lams,
'Threshold' = rep(0, length(lams)),
'Accuracy' = rep(0, length(lams)),
'AcuracyLower' = rep(0, length(lams)),
'AccuracyHigher' = rep(0, length(lams)))
for (i in c(1:length(lams))){
thislambda <- lams[i]
Hvals <- ent_4_clean$H_pdON[ent_4_clean$Rho==thislambda]
Svals <- as.logical(ent_4_clean$Survive[ent_4_clean$Rho==thislambda])
thispredict <- threshold_classify(Hvals,Svals)
ent_4_clean$Prediction[ent_4_clean$Rho==thislambda] <- thispredict$prediction
predictors$Threshold[i] <- thispredict$threshold
predictors$Accuracy[i] <- thispredict$cm$overall['Accuracy']
predictors$AccuracyLower[i] <- thispredict$cm$overall['AccuracyLower']
predictors$AccuracyHigher[i] <- thispredict$cm$overall['AccuracyUpper']
}
View(predictors)
ggplot(predictors, aes(x=Rho, y=Accuracy))+geom_line()+geom_errorbar(aes(ymin=AccuracyLower, ymax=AccuracyHigher))+theme_bw()
ggplot(predictors, aes(x=Rho, y=Accuracy))+geom_line()+geom_errorbar(aes(ymin=AccuracyLower, ymax=AccuracyHigher))+theme_bw()+ylim(0,1)
ggplot(predictors, aes(x=1/Rho, y=Accuracy))+geom_line()+geom_errorbar(aes(ymin=AccuracyLower, ymax=AccuracyHigher))+theme_bw()+ylim(0,1)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(eval=FALSE)
annot_sp4300 <- read.csv('D:/defne/Documents/BC/TVO/pangenome/Pangenome and Clustering/SpectralSM4300_ANNOTATION_ALL_nolocustag.csv', header=T, stringsAsFactors = F)
diam_count <- read.csv('D:/defne/Documents/BC/TVO/pangenome/Pangenome and Clustering/SpectralSM4300_Diameter_Count.csv', header=T, stringsAsFactors = F)
names(annot_sp4300)
names(diam_count)
annot_merge_4300 <- merge(annot_sp4300, diam_count[,1:3], by="Cluster", all.x=T, all.y=T, sort=F)
sum(annot_merge_4300$N<372)
View(annot_merge_4300)
sum(annot_merge_4300$N==0)
sum(annot_merge_4300$N>0)
annot_merge_4300_clean <= annot_merge_4300[annot_merge_4300$N>0,]
annot_merge_4300_clean <- annot_merge_4300[annot_merge_4300$N>0,]
names(annot_merge_4300_clean)
annot_merge_4300_clean_tf <- annot_merge_4300_clean[(!is.na(annot_merge_4300_clean$Category1) & annot_merge_4300_clean$Category1=="Transcription") |
(!is.na(annot_merge_4300_clean$Category2) & annot_merge_4300_clean$Category2=="Transcription") |
(!is.na(annot_merge_4300_clean$Category3) & annot_merge_4300_clean$Category3=="Transcription"),]
annot_merge_4300_clean_tf
annot_merge_4300_clean_tf$Conservation <- -log10(annot_merge_4300_clean_tf)
annot_merge_4300_clean_tf$Conservation <- -log10(annot_merge_4300_clean_tf$Diameter)
View(annot_merge_4300_clean_tf)
metadata_T4 <- read.csv('T4_metadata.csv',  header=T, stringsAsFactors = F)
#is it in T4?
metadata_T4 <- read.csv('D:/defne/Documents/BC/TVO/TnSeq_RNASeq_Evo/New Experiments/T4_metadata.csv',  header=T, stringsAsFactors = F)
names(metadata_T4)
annot_merge_4300_clean_tf$TIGR4.Present <- annot_merge_4300_clean_tf$Cluster %in% metadata_T4$Cluster
View(annot_merge_4300_clean_tf)
write.csv(annot_merge_4300_clean_tf,
'D:/defne/Documents/BC/TVO/pangenome/Pangenome and Clustering/SpectralSM4300_Transcription_ANNOTATION.csv')
setwd('D:/defne/Documents/BC/TVO/TnSeq_RNASeq_Evo/New Experiments/')
#get metadata for the experiments
exptsheet <- read.csv('allfeatures.csv', header=T, stringsAsFactors = F)
exptsheet <- exptsheet[,c('Experiment', 'Strain', 'AB','Concentration', 'Survive')]
exptsheet <- unique(exptsheet)
#get the entropy values
ent_4 <- read.csv('Entropy/entropy_4_121918_all.csv', header=T, stringsAsFactors = F)
lams <- seq(1,0.1,-0.02)
ent_4 <- ent_4[ent_4$Rho %in% lams,]
lams <- unique(ent_4$Rho)
# fix typo in "Experiment" column - V-T4_VNC34 should be V-T4_VNC36
ent_4$Experiment[ent_4$Experiment == "V-T4_VNC34"]<-"V-T4_VNC36"
#add in the metadata
ent_4 <- merge(ent_4, exptsheet, by = "Experiment", all.x=T, all.y=F, sort=F)
library(caret)
source('Entropy/threshold_classify.R')
ent_4$Prediction <- F
ent_4_clean <- ent_4[!is.na(ent_4$H_pdON),]
predictors <- data.frame('Rho' = lams,
'Threshold' = rep(0, length(lams)),
'Accuracy' = rep(0, length(lams)),
'AcuracyLower' = rep(0, length(lams)),
'AccuracyHigher' = rep(0, length(lams)))
ent_4 <- read.csv('Entropy/entropy_4_121918_all.csv', header=T, stringsAsFactors = F)
setwd('D:/defne/Documents/BC/TVO/TnSeq_RNASeq_Evo/New Experiments/')
#get metadata for the experiments
exptsheet <- read.csv('allfeatures.csv', header=T, stringsAsFactors = F)
exptsheet <- exptsheet[,c('Experiment', 'Strain', 'AB','Concentration', 'Survive')]
exptsheet <- unique(exptsheet)
#get the entropy values
ent_4 <- read.csv('Entropy/entropy_4_121918_all.csv', header=T, stringsAsFactors = F)
lams <- c(seq(20,2,-1), seq(1,0.1,-0.02))
ent_4 <- ent_4[ent_4$Rho %in% lams,]
lams <- unique(ent_4$Rho)
# fix typo in "Experiment" column - V-T4_VNC34 should be V-T4_VNC36
ent_4$Experiment[ent_4$Experiment == "V-T4_VNC34"]<-"V-T4_VNC36"
#add in the metadata
ent_4 <- merge(ent_4, exptsheet, by = "Experiment", all.x=T, all.y=F, sort=F)
library(caret)
source('Entropy/threshold_classify.R')
ent_4$Prediction <- F
ent_4_clean <- ent_4[!is.na(ent_4$H_pdON),]
predictors <- data.frame('Rho' = lams,
'Threshold' = rep(0, length(lams)),
'Accuracy' = rep(0, length(lams)),
'AcuracyLower' = rep(0, length(lams)),
'AccuracyHigher' = rep(0, length(lams)))
for (i in c(1:length(lams))){
thislambda <- lams[i]
Hvals <- ent_4_clean$H_pdON[ent_4_clean$Rho==thislambda]
Svals <- as.logical(ent_4_clean$Survive[ent_4_clean$Rho==thislambda])
thispredict <- threshold_classify(Hvals,Svals)
ent_4_clean$Prediction[ent_4_clean$Rho==thislambda] <- thispredict$prediction
predictors$Threshold[i] <- thispredict$threshold
predictors$Accuracy[i] <- thispredict$cm$overall['Accuracy']
predictors$AccuracyLower[i] <- thispredict$cm$overall['AccuracyLower']
predictors$AccuracyHigher[i] <- thispredict$cm$overall['AccuracyUpper']
}
View(predictors)
ggplot(predictors,aes(x=Rho, y=Accuracy))+geom_line()+theme_bw()
View(predictors)
shiny::runApp('D:/defne/Documents/BC/TVO/webdev/stressus-wewilladapt/ABX')
x <- "SP_1884
SP_1883
SP_0045
SP_2092
SP_0046
SP_0001
SP_0002
"
x
x.Split()
strsplit(x)
strsplit(x,'\n')
unlist(strsplit(x,'\n'))
runApp('D:/defne/Documents/BC/TVO/webdev/stressus-wewilladapt/ABX')
runApp('D:/defne/Documents/BC/TVO/webdev/stressus-wewilladapt/ABX')
source('http://bioconductor.org/biocLite.R')
biocLite('SRAdb')
source('http://bioconductor.org/biocLite.R')
biocLite('SRAdb')
source('http://bioconductor.org/biocLite.R')
library(SRAdb)
library(DBI)
srafile = getSRAdbFile()
con = dbConnect(RSQLite::SQLite(), srafile)
listSRAfile('SRP026197', con)
rnafiles <- read.csv('D:/defne/Documents/BC/TVO/TnSeq_RNASeq_Evo/New Experiments/SRA_RNASeq.csv', header=T, stringsAsFactors = F)
rnafiles[duplicated(rnafiles$Filename),]
shiny::runApp('GitHub/ShinyOmics')
